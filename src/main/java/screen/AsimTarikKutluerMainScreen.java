package screen;


import component.AsimTarikKutluerBoard;
import core.AsimTarikKutluerPlayerBoard;
import core.AsimTarikKutluerNumberOnBoard;
import core.AsimTarikKutluerTombolaLinkedList;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JPanel;

/**
 *
 * @author asimTarik
 */
public class AsimTarikKutluerMainScreen extends javax.swing.JFrame {

    int[] randomValues = new int[90];
    int[] randomValuesByHand = {78, 52, 61, 63, 84, 88,  3, 35, 41, 45,
    53, 51, 28, 85, 36, 25, 40, 83, 20, 73,
    79, 17, 15, 75, 27, 70, 22, 72, 11, 48,
    39, 19, 64, 47, 13, 54, 38, 87,  8, 62,
    21,  9, 46, 44, 10, 58, 60, 68, 80, 33,
    42, 30, 74, 23, 82, 32, 29, 69, 16, 24,
    14, 90, 50, 12, 67, 77, 49, 65, 89, 76,
    86,  5,  6,  1, 56, 55, 71, 34, 31,  4,
    81,  7, 59, 18, 26, 37, 66,  2, 57, 43};
    int randomCount = 0;
    Random random = new Random();
    private ArrayList<AsimTarikKutluerBoard> boards = new ArrayList<>();
    
     
    

    AsimTarikKutluerSettingScreen settingScreen = new AsimTarikKutluerSettingScreen();
    private AsimTarikKutluerTombolaLinkedList<AsimTarikKutluerPlayerBoard> playersList = settingScreen.getPlayersList();

    public AsimTarikKutluerMainScreen(AsimTarikKutluerTombolaLinkedList<AsimTarikKutluerPlayerBoard> playersList) {
        this.playersList = playersList;
        RandomPermutation();
        initComponents();
        addPlayerBoardToPanel();
        
        

    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        RandomValueLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setPreferredSize(new java.awt.Dimension(250, 0));
        jPanel2.setLayout(new java.awt.CardLayout());

        jPanel1.setPreferredSize(new java.awt.Dimension(250, 162));
        jPanel1.setLayout(new java.awt.CardLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(300, 162));
        jPanel4.setLayout(new java.awt.CardLayout());

        jPanel3.setLayout(new java.awt.CardLayout());

        jButton1.setText("Spin New Number");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Player 1");

        jLabel2.setText("Player 2");

        jLabel3.setText("Player 3");

        jLabel4.setText("Player 4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(RandomValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(RandomValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton1)))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (randomCount >= 90) {
            return;
        }
        RandomValueLabel.setText(String.valueOf(randomValues[randomCount]));
        Checking();
        addPlayerBoardToPanel();
        
        for (AsimTarikKutluerBoard board : boards) {
            board.repaint();
        }
        TombolaCheck();
        randomCount++;


    }//GEN-LAST:event_jButton1ActionPerformed
    public final void RandomPermutation() {

        int index = 0;
        while (index < 90) {
            int value = random.nextInt(1, 91);
            boolean flag = false;
            for (int i = 0; i < index; i++) {
                if (randomValues[i] == value) {
                    flag = true;
                    break;
                }
            }
            if (flag) {
                continue;
            }

            randomValues[index++] = value;
        }
    }

    private void addPlayerBoardToPanel() {

        for (int i = 0; i < playersList.size(); i++) {
            AsimTarikKutluerPlayerBoard player = playersList.get(i);
            JPanel panel;
            switch (i) {
                case 0 ->
                    panel = jPanel1;
                case 1 ->
                    panel = jPanel2;
                case 2 ->
                    panel = jPanel3;
                case 3 ->
                    panel = jPanel4;
                default -> {
                    return;
                }
            }
            // Pass the TombolaLinkedList from player's board to the Board constructor
            AsimTarikKutluerBoard board = new AsimTarikKutluerBoard(player.numbers);
           
            // Now you can add board to the panel or do any other necessary actions
            // For example:
            panel.add(board);
            boards.add(board);
           
        }

    }

    public void Checking() {

        // Iterate through each tombola card's linked list
        for (int i = 0; i < playersList.size(); i++) {
            for (int j = 0; j < playersList.getFromChild(i).numbers.size(); j++) {
                if (!playersList.getFromChild(i).numbers.getFromChild(j).isChecked()
                        && playersList.getFromChild(i).numbers.getFromChild(j).getNumber() == randomValues[randomCount]) {

                    playersList.getFromChild(i).numbers.getFromChild(j).setChecked(true);
                    
                    System.out.println(playersList.getFromChild(i).numbers.getFromChild(j).getNumber());
                    
                    
                }
            }
        }
    }

    public void TombolaCheck() {
        int[] cinkoCounts = new int[playersList.size()];

        for (int i = 0; i < playersList.size(); i++) {
            
            AsimTarikKutluerTombolaLinkedList<AsimTarikKutluerNumberOnBoard> card = playersList.getFromChild(i).numbers;

            // Check each row of the current tombola card
            for (int row = 0; row < 3; row++) {

                int counter = 0;

                // Iterate through each value in the current row
                for (int col = 0; col < 5; col++) {
                    // Calculate the index of the value in the tombola card's linked list
                    int index = row * 5 + col;

                    // Check if the value is checked
                    if (card.getFromChild(index).isChecked()) {
                        counter++;
                    }

                }
                 
                 if (counter == 5) {
                cinkoCounts[i]++; // Increment the count of çinko for the player

                switch (cinkoCounts[i]) {
                    case 1:
                        System.out.println("Current Status for player "+ (i+1) +" : ");
                        System.out.println("///////////////////////////////");
                        System.out.println("Player " + (i + 1) + " achieved the first çinko");
                        System.out.println("-----------------------------------------------");
                        break;
                    case 2:
                        System.out.println("Player " + (i + 1) + " achieved the second çinko");
                         System.out.println("-----------------------------------------------");
                        break;
                    case 3:
                        System.out.println("Player " + (i + 1) + " achieved Tombala!!");
                         System.out.println("-----------------------------------------------");
                        break;
                    default:
                        throw new AssertionError();
                }
            }
            }
        }
    }

    private static AsimTarikKutluerTombolaLinkedList<AsimTarikKutluerPlayerBoard> getPlayersList() {
        // Assuming playersList is stored in SettingScreen and you have a method to retrieve it
        AsimTarikKutluerSettingScreen settingScreen = new AsimTarikKutluerSettingScreen(); // Create an instance of SettingScreen
        return settingScreen.getPlayersList(); // Return the playersList
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        AsimTarikKutluerMainScreen mainScreen = new AsimTarikKutluerMainScreen(getPlayersList());

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainScreen.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel RandomValueLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}




